@Ecore(nsPrefix="sc", nsURI="http://www.fornax-platform.org/sculptor")
@GenModel(modelDirectory="/fornax-cartridges-sculptor-metamodel/src-gen", modelName="Sculptormetamodel",
importerID="org.eclipse.emf.importer.ecore")
package sculptormetamodel

abstract class NamedElement
{
	String name
	String doc
	String hint
}

class Application extends NamedElement
{
	String basePackage
	contains resolving Module [] modules opposite application
}

class Service extends NamedElement
{
	contains resolving ServiceOperation [] operations opposite service
	refers Repository [] repositoryDependencies
	container resolving Module module opposite services
	unique String [] otherDependencies
	refers Service [] serviceDependencies
	boolean gapClass
	boolean webService
	boolean remoteInterface = "true"
	boolean localInterface = "true"
	refers Subscribe subscribe
}

class Repository extends NamedElement
{
	contains resolving RepositoryOperation [] operations opposite repository
	container resolving DomainObject aggregateRoot opposite repository
	refers Repository [] repositoryDependencies
	unique String [] otherDependencies
	boolean gapClass
	refers Subscribe subscribe
}

abstract class DomainObject extends NamedElement
{
	contains resolving Reference [] references opposite from
	refers DomainObject ^extends
	contains resolving Attribute [] attributes
	boolean ^abstract
	contains resolving Repository repository opposite aggregateRoot
	container resolving Module module opposite domainObjects
	boolean optimisticLocking = "true"
	boolean cache
	String ^package
	String databaseTable
	String extendsName
	String validate
	boolean gapClass
	refers Inheritance inheritance
	String discriminatorColumnValue
	boolean aggregateRoot = "true"
	refers DomainObject belongsToAggregate
	contains resolving DomainObjectOperation [] operations opposite domainObject
	refers Trait [] traits
}

class Reference extends NamedElement
{
	boolean many
	String collectionType
	refers Reference ^opposite
	refers DomainObject [1] to
	String cascade
	String orderBy
	String visibility
	boolean changeable = "true"
	container resolving DomainObject from opposite references
	boolean required
	String fetch
	boolean cache
	boolean naturalKey
	boolean inverse
	boolean nullable
	String databaseColumn
	String validate
	boolean ^transient
	String databaseJoinTable
	String databaseJoinColumn
}

class TypedElement extends NamedElement
{
	String ^type
	String collectionType
	String mapKeyType
}

class DomainObjectTypedElement extends TypedElement
{
	refers DomainObject domainObjectType
	refers DomainObject mapKeyDomainObjectType
}

class Attribute extends TypedElement
{
	boolean changeable = "true"
	String databaseType
	boolean nullable
	boolean naturalKey
	String visibility
	boolean required
	String length
	boolean index
	String databaseColumn
	String validate
	boolean ^transient
}

class Operation extends DomainObjectTypedElement
{
	String ^throws
	String visibility
	contains resolving Parameter [] parameters
	refers Publish publish
}

class Parameter extends DomainObjectTypedElement
{
}

class RepositoryOperation extends Operation
{
	boolean delegateToAccessObject = "false"
	container resolving Repository [1] repository opposite operations
	String accessObjectName
}

class ServiceOperation extends Operation
{
	refers RepositoryOperation delegate
	container resolving Service [1] service opposite operations
	refers ServiceOperation serviceDelegate
}

class ValueObject extends DomainObject
{
	boolean immutable = "true"
	boolean persistent = "true"
}

class Entity extends DomainObject
{
	boolean auditable = "true"
}

class Module extends NamedElement
{
	String basePackage
	container resolving Application application opposite modules
	contains resolving DomainObject [] domainObjects opposite module
	contains resolving Consumer [] consumers opposite module
	contains resolving Service [] services opposite module
	boolean external
	String persistenceUnit
	contains resolving Resource [] resources opposite module
}

class BasicType extends ValueObject
{
}

class Consumer extends NamedElement
{
	container resolving Module module opposite consumers
	refers Repository [] repositoryDependencies
	refers Service [] serviceDependencies
	String channel
	refers DomainObject messageRoot
	unique String [] otherDependencies
	refers Subscribe subscribe
}

class Enum extends DomainObject
{
	contains resolving EnumValue [] values
	boolean ordinal
}

class EnumValue extends NamedElement
{
	contains resolving EnumConstructorParameter [] parameters
}

class EnumConstructorParameter
{
	String value
}

class Inheritance
{
	String discriminatorColumnName
	String discriminatorColumnLength
	InheritanceType ^type
	DiscriminatorType discriminatorType
}

enum InheritanceType
{
	SINGLE_TABLE
	JOINED
}

enum DiscriminatorType
{
	STRING
	CHAR
	INTEGER
}

class DataTransferObject extends ValueObject
{
}

class CommandEvent extends Event
{
}

class DomainEvent extends Event
{
}

class Subscribe
{
	String eventBus
	String topic
}

abstract class Event extends ValueObject
{
}

class Publish
{
	String eventBus
	String topic
	refers Event eventType
}

class Trait extends DomainObject
{
}

class DomainObjectOperation extends Operation
{
	container resolving DomainObject domainObject opposite operations
	boolean ^abstract
}

class Resource extends NamedElement
{
	refers Service [] serviceDependencies
	boolean gapClass
	String path
	contains resolving ResourceOperation [] operations opposite resource
	container resolving Module module opposite resources
}

class ResourceOperation extends Operation
{
	container resolving Resource resource opposite operations
	String path
	HttpMethod httpMethod
	refers ServiceOperation delegate
	String returnString
}

enum HttpMethod
{
	UNDEFINED
	GET
	POST
	PUT
	DELETE
}